spring:
  cloud:
    loadbalancer:
      retry:
        enabled: true #该参数用来开启重试机制，默认是开启
  application:
    name: Ribbon-Hystrix

server:
  port: 9100

#断路器配置
hystrix:
  metrics:
    enabled: true #启用Hystrix指标轮询。默认值为true
    polling-interval-ms: 2000 #度量指标的后续轮询之间的间隔。默认为2000毫秒
  command: 
    default: 
      execution: 
        timeout: 
          enabled: true   
        isolation: 
          thread: 
            #断路器的超时时间,下级服务返回超出熔断器时间，即便成功，消费端消息也是TIMEOUT,所以一般断路器的超时时间需要大于ribbon的超时时间。
            #服务的返回时间大于ribbon的超时时间，会触发重试.默认=1000，太小
            timeoutInMilliseconds: 3000 
#断路器详细设置
#当在配置时间窗口内达到此数量的失败后，进行短路。默认20个）
#hystrix.command.default.circuitBreaker.requestVolumeThreshold=20
#短路多久以后开始尝试是否恢复，默认5s）
#hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds=5
#出错百分比阈值，当达到此阈值后，开始短路。默认50%）
#hystrix.command.default.circuitBreaker.errorThresholdPercentage=50%
#ribbon请求连接的超时时间- 限制3秒内必须请求到服务，并不限制服务处理的返回时间
#ribbon.ConnectTimeout=3000
#请求处理的超时时间 下级服务响应最大时间,超出时间消费方（路由也是消费方）返回timeout
#ribbon.ReadTimeout=5000
# 单独设置某个服务的超时时间，会覆盖其他的超时时间限制，服务的名称已注册中心页面显示的名称为准，超时时间不可大于断路器的超时时间
#service-a.ribbon.ReadTimeout=60000
#service-a.ribbon.ConnectTimeout=60000 

ribbon:
  OkToRetryOnAllOperations: false #对所有操作请求都进行重试,默认false
  ReadTimeout: 5000   #请求处理的超时时间 ，默认值5000
  ConnectTimeout: 3000 #ribbon请求连接的超时时间，默认值2000
  MaxAutoRetries: 0     #对当前实例的重试次数，默认0
  MaxAutoRetriesNextServer: 1 #对切换实例的重试次数，默认1
#重试机制
#该参数用来开启重试机制，默认是关闭
#spring.cloud.loadbalancer.retry.enabled=true
#对所有操作请求都进行重试
#ribbon.OkToRetryOnAllOperations=true
#对当前实例的重试次数
#ribbon.MaxAutoRetries=1
#切换实例的重试次数
#ribbon.MaxAutoRetriesNextServer=1
#根据如上配置，当访问到故障请求的时候，它会再尝试访问一次当前实例（次数由MaxAutoRetries配置），
#如果不行，就换一个实例进行访问，如果还是不行，再换一次实例访问（更换次数由MaxAutoRetriesNextServer配置），
#如果依然不行，返回失败信息
 
eureka:
  instance:
    #服务续约时间(服务向注册中心发送续约的间隔),默认30秒  
    lease-renewal-interval-in-seconds: 30
  client:
    #针对新服务上线, Eureka client获取不及时的问题，可以修改服务列表更新时间，默认：30秒
    #前提是eureka.client.fetch-registry的值是true,允许向服务中心检索服务列表
    #防止调用服务时,该服务还没获取到
    registry-fetch-interval-seconds: 5
    service-url:
      defaultZone: http://localhost:8000/eureka/

